{
    "name": "MASVS-CRYPTO - MASVS-CRYPTO-1",
    "description": "The app employs current strong cryptography and uses it according to industry best practices.",
    "data": [
        {
            "target_file": "*.java",
            "rules": [
                {
                    "args":"-n",
                    "keyword": ["new Random(", "SHA1PRNG", "Dual_EC_DRBG"],
                    "description":"CRYPTO-1: Testing Random Number Generation -->  Weak Random",
                    "note":"It is recommended to use Pseudo-random number generators along-with 256-bit seed for producing a random-enough number, if observed.\nPlease note that, Under certain conditions this weakness may expose mobile application data encryption or other protection based on randomization."
                },
                {
                    "args":"-n",
                    "keyword": ["java.security.SecureRandom","SecureRandom()","secureRandom."],
                    "description":"CRYPTO-1: Testing Random Number Generation --> Insecure SecureRandom",
                    "note":"ehe"
                },
                {
                    "args":"-n",
                    "keyword": [" SecretKeySpec(", "IvParameterSpec("],
                    "description":"CRYPTO-1: Testing Symmetric Cryptography",
                    "note":"It is recommended to verify that hardcoded symmetric keys are not used in security-sensitive contexts as the only method of encryption, if observed.\nPlease note that, the used symmetric keys are not part of the application resources, cannot be derived from known values, and are not hardcoded in code."
                },
                {
                    "args":"-n",
                    "keyword": ["Signature.getInstance", "MessageDigest.getInstance", "Mac.getInstance"],
                    "description":"CRYPTO-1: Testing the Configuration of Cryptographic Standard Algorithms --> The Insecure/Deprecated Cryptographic Algorithms",
                    "note":"It is recommended that cryptographic algorithms used in the application are up to date and in-line with industry standards.\nPlease note that, Vulnerable algorithms include outdated block ciphers (such as DES, DESede, and 3DES), stream ciphers (such as RC4), hash functions (such as MD5 and SHA1), and broken random number generators (such as Dual_EC_DRBG and SHA1PRNG)."
                },
                {
                    "args":"-n",
                    "keyword": "Cipher.getInstance",
                    "description":"CRYPTO-1: Testing the Configuration of Cryptographic Standard Algorithms --> The Insecure/Weak Cipher Modes",
                    "note":"It is recommended to use a block mode that protects the integrity of the stored data, such as Galois/Counter Mode (GCM).\nPlease note that, the ECB and CBC modes provide confidentiality, but other modes such as Galois Counter Mode (GCM) provides both confidentiality and integrity protection."
                },
                {
                    "args":"-n",
                    "keyword": [" = {0, 0, 0, 0, 0", " = {1, 2, 3, 4, 5", " = {0, 1, 2, 3, 4"],
                    "description":"CRYPTO-1: Testing the Configuration of Cryptographic Standard Algorithms --> The Static IVs",
                    "note":"It is recommended not to use Static IVs for any sensitive data, if observed.\nPlease note that, Cryptographic keys should not be kept in the source code and IVs must be regenerated for each message to be encrypted."
                }
            ]
        }
    ]
}