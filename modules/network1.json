{
    "name": "MASVS-NETWORK - MASVS-NETWORK-1",
    "description": "The app secures all network traffic according to the current best practices.",
    "data": [
        {
            "target_file": "*.java",
            "rules": [
                {
                    "args":"-n",
                    "keyword": ["(HttpURLConnection)", "SSLCertificateSocketFactory.getInsecure("],
                    "description":"NETWORK-1: Testing Data Encryption on the Network --> Testing Network Requests over Secure Protocols",
                    "note":"Should not use any unencrypted transmission mechanisms for sensitive data.\n\tThe HTTP protocol does not provide any encryption of the transmitted data, which can be easily intercepted by an attacker.",
                    "reference": "CWE-319: Cleartext Transmission of Sensitive Information.\n\thttps://cwe.mitre.org/data/definitions/319.html"
                },
                {
                    "args":"-n",
                    "important_keyword": "SSLSocket",
                    "keyword": ["SSLSocket", "getDefaultHostnameVerifier"],
                    "description":"NETWORK-1: Testing Data Encryption on the Network --> Testing Network API Usage",
                    "note":"Even when using a low-level API which is supposed to make secure connections (such as SSLSocket), be aware that it has to be securely implemented.\n\tFor instance, SSLSocket does not verify the hostname. Use getDefaultHostnameVerifier to verify the hostname.",
                    "reference": "CWE-319: Cleartext Transmission of Sensitive Information.\n\thttps://cwe.mitre.org/data/definitions/319.html"
                },
                {
                    "args":"-n",
                    "important_keyword": ["checkServerTrusted(", "checkClientTrusted(", "getAcceptedIssuers("],
                    "keyword": ["X509Certificate","checkServerTrusted(", "checkClientTrusted(", "getAcceptedIssuers("],
                    "description":"NETWORK-1: Testing Endpoint Identify Verification --> The Server Certificate verification",
                    "note":"Should carefully verify the Server Certificate.\nIt should be signed by a trusted CA, not expired, not self-signed, etc.",
                    "reference": "CWE-295: Improper Certificate Validation.\n\thttps://cwe.mitre.org/data/definitions/295.html"
                },
                {
                    "args":"-n",
                    "important_keyword": "onReceivedSslError",
                    "keyword": ["onReceivedSslError", "sslErrorHandler", ".proceed(", "setWebViewClient", "findViewById"],
                    "description":"NETWORK-1: Testing Endpoint Identify Verification --> The WebView Server Certificate verification",
                    "note":"Should not ignoring any TLS error that occurs when the WebView tries to connect to the remote website.",
                    "reference": "CWE-295: Improper Certificate Validation.\n\thttps://cwe.mitre.org/data/definitions/295.html"
                },
                {
                    "args":"-n",
                    "keyword": ["SSLContext.getInstance(", "tlsVersions(TlsVersion"],
                    "description":"NETWORK-1: Testing the TLS Settings",
                    "note":"TLS v1.2 and TLS v1.3 are considered best practice for secure transmission of data.\n\tIf a mobile application connects to a specific server, its networking stack can be tuned to ensure the highest possible security level for the serverâ€™s configuration.\n\tLack of support in the underlying operating system may force the mobile application to use a weaker configuration.",
                    "reference": "CWE-326: Inadequate Encryption Strength.\n\thttps://cwe.mitre.org/data/definitions/326.html"
                },
                {
                    "args":"-n",
                    "keyword": [" ProviderInstaller.installIfNeeded", " ProviderInstaller.installIfNeededAsync"],
                    "description":"NETWORK-1: Testing the Security Provider",
                    "note":"It seems that the ProviderInstaller class is called with either installIfNeeded or installIfNeededAsync to prevent SSL exploits as Android relies on a security provider which comes with the device.",
                    "note1":"Applications based on the Android SDK should depend on GooglePlayServices.\n\tThe ProviderInstaller class is called with either installIfNeeded or installIfNeededAsync to prevent SSL exploits.",
                    "reference":"CWE-693: Protection Mechanism Failure.\n\thttps://cwe.mitre.org/data/definitions/693.html"
                }
            ]
        },
        {
            "target_file": "*.xml",
            "rules": [
                {
                    "args":"-n",
                    "keyword": ["android:usesCleartextTraffic", "cleartextTrafficPermitted"],
                    "description":"NETWORK-1: Testing Data Encryption on the Network --> Testing Cleartext Traffic",
                    "note":"Should set 'android:usesCleartextTraffic' or 'cleartextTrafficPermitted' to false, make ensure that the app is not allowing cleartext HTTP traffic Sensitive information should be sent over secure channels only.",
                    "reference": "CWE-319: Cleartext Transmission of Sensitive Information.\n\thttps://cwe.mitre.org/data/definitions/319.html"
                },
                {
                    "args":"-n",
                    "keyword": ["<certificates src=", "<domain", "<base"],
                    "description":"NETWORK-2: Testing Endpoint Identify Verification --> Custom Trust Anchors",
                    "note":"Custom Trust Anchors such as <certificates src=user should be avoided.\n\tThe <pin> should be set carefully if it cannot be avoided.\n\tIf the app will trust user-supplied CAs by using a custom Network Security Configuration with a custom trust anchor, the possibility of MITM attacks increases.",
                    "reference": "CWE-295: Improper Certificate Validation.\n\thttps://cwe.mitre.org/data/definitions/295.html"
                }
            ]
        }
    ]
}